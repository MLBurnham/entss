// Code generated by stanc v2.33.1
#include <stan/model/model_header.hpp>
namespace model_MAP_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 30> locations_array__ =
  {" (found before start of program)",
  " (in 'model_MAP.stan', line 15, column 2 to column 18)",
  " (in 'model_MAP.stan', line 16, column 2 to column 18)",
  " (in 'model_MAP.stan', line 17, column 2 to column 18)",
  " (in 'model_MAP.stan', line 18, column 2 to column 21)",
  " (in 'model_MAP.stan', line 19, column 2 to column 28)",
  " (in 'model_MAP.stan', line 24, column 2 to column 31)",
  " (in 'model_MAP.stan', line 25, column 2 to column 26)",
  " (in 'model_MAP.stan', line 28, column 2 to column 23)",
  " (in 'model_MAP.stan', line 29, column 2 to column 23)",
  " (in 'model_MAP.stan', line 30, column 2 to column 44)",
  " (in 'model_MAP.stan', line 32, column 2 to column 60)",
  " (in 'model_MAP.stan', line 2, column 2 to column 17)",
  " (in 'model_MAP.stan', line 3, column 2 to column 17)",
  " (in 'model_MAP.stan', line 4, column 2 to column 17)",
  " (in 'model_MAP.stan', line 5, column 8 to column 9)",
  " (in 'model_MAP.stan', line 5, column 2 to column 35)",
  " (in 'model_MAP.stan', line 6, column 8 to column 9)",
  " (in 'model_MAP.stan', line 6, column 2 to column 35)",
  " (in 'model_MAP.stan', line 7, column 8 to column 9)",
  " (in 'model_MAP.stan', line 7, column 2 to column 17)",
  " (in 'model_MAP.stan', line 8, column 8 to column 9)",
  " (in 'model_MAP.stan', line 8, column 2 to column 26)",
  " (in 'model_MAP.stan', line 9, column 2 to column 17)",
  " (in 'model_MAP.stan', line 10, column 8 to column 9)",
  " (in 'model_MAP.stan', line 10, column 2 to column 36)",
  " (in 'model_MAP.stan', line 15, column 9 to column 10)",
  " (in 'model_MAP.stan', line 16, column 9 to column 10)",
  " (in 'model_MAP.stan', line 17, column 9 to column 10)",
  " (in 'model_MAP.stan', line 18, column 9 to column 10)"};
class model_MAP_model final : public model_base_crtp<model_MAP_model> {
 private:
  int J;
  int K;
  int N;
  std::vector<int> jj;
  std::vector<int> kk;
  std::vector<int> X;
  std::vector<int> y;
  int G;
  std::vector<int> gg;
 public:
  ~model_MAP_model() {}
  model_MAP_model(stan::io::var_context& context__, unsigned int
                  random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_MAP_model_namespace::model_MAP_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 12;
      context__.validate_dims("data initialization", "J", "int",
        std::vector<size_t>{});
      J = std::numeric_limits<int>::min();
      current_statement__ = 12;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "J", J, 1);
      current_statement__ = 13;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      current_statement__ = 13;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 14;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 14;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 15;
      stan::math::validate_non_negative_index("jj", "N", N);
      current_statement__ = 16;
      context__.validate_dims("data initialization", "jj", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      jj = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 16;
      jj = context__.vals_i("jj");
      current_statement__ = 16;
      stan::math::check_greater_or_equal(function__, "jj", jj, 1);
      current_statement__ = 16;
      stan::math::check_less_or_equal(function__, "jj", jj, J);
      current_statement__ = 17;
      stan::math::validate_non_negative_index("kk", "N", N);
      current_statement__ = 18;
      context__.validate_dims("data initialization", "kk", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      kk = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 18;
      kk = context__.vals_i("kk");
      current_statement__ = 18;
      stan::math::check_greater_or_equal(function__, "kk", kk, 1);
      current_statement__ = 18;
      stan::math::check_less_or_equal(function__, "kk", kk, K);
      current_statement__ = 19;
      stan::math::validate_non_negative_index("X", "N", N);
      current_statement__ = 20;
      context__.validate_dims("data initialization", "X", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      X = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 20;
      X = context__.vals_i("X");
      current_statement__ = 21;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 22;
      context__.validate_dims("data initialization", "y", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      y = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 22;
      y = context__.vals_i("y");
      current_statement__ = 22;
      stan::math::check_greater_or_equal(function__, "y", y, 0);
      current_statement__ = 23;
      context__.validate_dims("data initialization", "G", "int",
        std::vector<size_t>{});
      G = std::numeric_limits<int>::min();
      current_statement__ = 23;
      G = context__.vals_i("G")[(1 - 1)];
      current_statement__ = 23;
      stan::math::check_greater_or_equal(function__, "G", G, 1);
      current_statement__ = 24;
      stan::math::validate_non_negative_index("gg", "J", J);
      current_statement__ = 25;
      context__.validate_dims("data initialization", "gg", "int",
        std::vector<size_t>{static_cast<size_t>(J)});
      gg = std::vector<int>(J, std::numeric_limits<int>::min());
      current_statement__ = 25;
      gg = context__.vals_i("gg");
      current_statement__ = 25;
      stan::math::check_greater_or_equal(function__, "gg", gg, 1);
      current_statement__ = 25;
      stan::math::check_less_or_equal(function__, "gg", gg, G);
      current_statement__ = 26;
      stan::math::validate_non_negative_index("delta", "K", K);
      current_statement__ = 27;
      stan::math::validate_non_negative_index("alpha", "K", K);
      current_statement__ = 28;
      stan::math::validate_non_negative_index("theta", "J", J);
      current_statement__ = 29;
      stan::math::validate_non_negative_index("mu_theta", "G", G);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = K + K + J + G + 1;
  }
  inline std::string model_name() const final {
    return "model_MAP_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.33.1",
             "stancflags = --filename-in-msg=model_MAP.stan"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_MAP_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> delta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 1;
      delta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 2;
      alpha = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      Eigen::Matrix<local_scalar_t__,-1,1> theta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 3;
      theta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(J);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_theta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(G, DUMMY_VAR__);
      current_statement__ = 4;
      mu_theta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(G);
      local_scalar_t__ sigma_theta = DUMMY_VAR__;
      current_statement__ = 5;
      sigma_theta = in__.template read_constrain_lb<local_scalar_t__,
                      jacobian__>(0, lp__);
      {
        current_statement__ = 6;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma_theta, .3, .1));
        current_statement__ = 7;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu_theta, 0, 1));
        current_statement__ = 8;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(delta, 0, 1));
        current_statement__ = 9;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha, 0, 1));
        current_statement__ = 10;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(theta,
                         stan::model::rvalue(mu_theta, "mu_theta",
                           stan::model::index_multi(gg)), sigma_theta));
        current_statement__ = 11;
        lp_accum__.add(stan::math::binomial_logit_lpmf<propto__>(y, X,
                         stan::math::add(
                           stan::model::rvalue(delta, "delta",
                             stan::model::index_multi(kk)),
                           stan::math::elt_multiply(
                             stan::model::rvalue(alpha, "alpha",
                               stan::model::index_multi(kk)),
                             stan::model::rvalue(theta, "theta",
                               stan::model::index_multi(jj))))));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_MAP_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> delta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 1;
      delta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 2;
      alpha = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      Eigen::Matrix<local_scalar_t__,-1,1> theta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 3;
      theta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(J);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_theta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(G, DUMMY_VAR__);
      current_statement__ = 4;
      mu_theta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(G);
      local_scalar_t__ sigma_theta = DUMMY_VAR__;
      current_statement__ = 5;
      sigma_theta = in__.template read_constrain_lb<local_scalar_t__,
                      jacobian__>(0, lp__);
      {
        current_statement__ = 6;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma_theta, .3, .1));
        current_statement__ = 7;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu_theta, 0, 1));
        current_statement__ = 8;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(delta, 0, 1));
        current_statement__ = 9;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha, 0, 1));
        current_statement__ = 10;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(theta,
                         stan::model::rvalue(mu_theta, "mu_theta",
                           stan::model::index_multi(gg)), sigma_theta));
        current_statement__ = 11;
        lp_accum__.add(stan::math::binomial_logit_lpmf<propto__>(y, X,
                         stan::math::add(
                           stan::model::rvalue(delta, "delta",
                             stan::model::index_multi(kk)),
                           stan::math::elt_multiply(
                             stan::model::rvalue(alpha, "alpha",
                               stan::model::index_multi(kk)),
                             stan::model::rvalue(theta, "theta",
                               stan::model::index_multi(jj))))));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "model_MAP_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> delta =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      delta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      Eigen::Matrix<double,-1,1> alpha =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      alpha = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      Eigen::Matrix<double,-1,1> theta =
        Eigen::Matrix<double,-1,1>::Constant(J,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      theta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(J);
      Eigen::Matrix<double,-1,1> mu_theta =
        Eigen::Matrix<double,-1,1>::Constant(G,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      mu_theta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(G);
      double sigma_theta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      sigma_theta = in__.template read_constrain_lb<local_scalar_t__,
                      jacobian__>(0, lp__);
      out__.write(delta);
      out__.write(alpha);
      out__.write(theta);
      out__.write(mu_theta);
      out__.write(sigma_theta);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> delta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(delta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K),
        "assigning variable delta");
      out__.write(delta);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(alpha,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K),
        "assigning variable alpha");
      out__.write(alpha);
      Eigen::Matrix<local_scalar_t__,-1,1> theta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(theta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(J),
        "assigning variable theta");
      out__.write(theta);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_theta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(G, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(mu_theta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(G),
        "assigning variable mu_theta");
      out__.write(mu_theta);
      local_scalar_t__ sigma_theta = DUMMY_VAR__;
      current_statement__ = 5;
      sigma_theta = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_theta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "delta", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "alpha", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "theta", "double",
        std::vector<size_t>{static_cast<size_t>(J)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "mu_theta",
        "double", std::vector<size_t>{static_cast<size_t>(G)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "sigma_theta",
        "double", std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> delta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> delta_flat__;
        current_statement__ = 1;
        delta_flat__ = context__.vals_r("delta");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          stan::model::assign(delta, delta_flat__[(pos__ - 1)],
            "assigning variable delta", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(delta);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> alpha_flat__;
        current_statement__ = 2;
        alpha_flat__ = context__.vals_r("alpha");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          stan::model::assign(alpha, alpha_flat__[(pos__ - 1)],
            "assigning variable alpha", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(alpha);
      Eigen::Matrix<local_scalar_t__,-1,1> theta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> theta_flat__;
        current_statement__ = 3;
        theta_flat__ = context__.vals_r("theta");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          stan::model::assign(theta, theta_flat__[(pos__ - 1)],
            "assigning variable theta", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(theta);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_theta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(G, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> mu_theta_flat__;
        current_statement__ = 4;
        mu_theta_flat__ = context__.vals_r("mu_theta");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
          stan::model::assign(mu_theta, mu_theta_flat__[(pos__ - 1)],
            "assigning variable mu_theta", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(mu_theta);
      local_scalar_t__ sigma_theta = DUMMY_VAR__;
      current_statement__ = 5;
      sigma_theta = context__.vals_r("sigma_theta")[(1 - 1)];
      out__.write_free_lb(0, sigma_theta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"delta", "alpha", "theta", "mu_theta",
                "sigma_theta"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(J)},
                std::vector<size_t>{static_cast<size_t>(G)},
                std::vector<size_t>{}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "delta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      param_names__.emplace_back(std::string() + "theta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu_theta" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma_theta");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "delta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      param_names__.emplace_back(std::string() + "theta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu_theta" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma_theta");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"delta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"mu_theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(G) + "},\"block\":\"parameters\"},{\"name\":\"sigma_theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"delta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"mu_theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(G) + "},\"block\":\"parameters\"},{\"name\":\"sigma_theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((K + K) + J) + G) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((K + K) + J) + G) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_MAP_model_namespace::model_MAP_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_MAP_model_namespace::profiles__;
}
#endif